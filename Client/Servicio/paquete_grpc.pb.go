// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Servicio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EstructuraCentralizadaClient is the client API for EstructuraCentralizada service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstructuraCentralizadaClient interface {
	// Servicios usados para la implementacion de la estructura centralizada
	Subir(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadStatus, error)
	EnviarPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Respuesta, error)
	VerificarEstadoServidor(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	EnviarChunk(ctx context.Context, in *ChunkSendToServer, opts ...grpc.CallOption) (*Mensaje, error)
	BajarArchivo(ctx context.Context, in *BookToDownload, opts ...grpc.CallOption) (*ListChunk, error)
	BajarChunk(ctx context.Context, in *ChunkDes, opts ...grpc.CallOption) (*ChunkBook, error)
	ObtenerLibrosDisponibles(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Books, error)
	PedirRecurso(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	LiberarRecurso(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	WriteLogs(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Mensaje, error)
	SubirDistribuida(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadStatus, error)
	DarPermiso(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Mensaje, error)
	AceptarSolicitud(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Mensaje, error)
}

type estructuraCentralizadaClient struct {
	cc grpc.ClientConnInterface
}

func NewEstructuraCentralizadaClient(cc grpc.ClientConnInterface) EstructuraCentralizadaClient {
	return &estructuraCentralizadaClient{cc}
}

func (c *estructuraCentralizadaClient) Subir(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadStatus, error) {
	out := new(UploadStatus)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/Subir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) EnviarPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/EnviarPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) VerificarEstadoServidor(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/VerificarEstadoServidor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) EnviarChunk(ctx context.Context, in *ChunkSendToServer, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/EnviarChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) BajarArchivo(ctx context.Context, in *BookToDownload, opts ...grpc.CallOption) (*ListChunk, error) {
	out := new(ListChunk)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/BajarArchivo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) BajarChunk(ctx context.Context, in *ChunkDes, opts ...grpc.CallOption) (*ChunkBook, error) {
	out := new(ChunkBook)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/BajarChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) ObtenerLibrosDisponibles(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/ObtenerLibrosDisponibles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) PedirRecurso(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/PedirRecurso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) LiberarRecurso(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/LiberarRecurso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) WriteLogs(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/WriteLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) SubirDistribuida(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadStatus, error) {
	out := new(UploadStatus)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/SubirDistribuida", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) DarPermiso(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/DarPermiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estructuraCentralizadaClient) AceptarSolicitud(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/paquete.estructura_centralizada/AceptarSolicitud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstructuraCentralizadaServer is the server API for EstructuraCentralizada service.
// All implementations must embed UnimplementedEstructuraCentralizadaServer
// for forward compatibility
type EstructuraCentralizadaServer interface {
	// Servicios usados para la implementacion de la estructura centralizada
	Subir(context.Context, *Chunk) (*UploadStatus, error)
	EnviarPropuesta(context.Context, *Propuesta) (*Respuesta, error)
	VerificarEstadoServidor(context.Context, *Mensaje) (*Mensaje, error)
	EnviarChunk(context.Context, *ChunkSendToServer) (*Mensaje, error)
	BajarArchivo(context.Context, *BookToDownload) (*ListChunk, error)
	BajarChunk(context.Context, *ChunkDes) (*ChunkBook, error)
	ObtenerLibrosDisponibles(context.Context, *Mensaje) (*Books, error)
	PedirRecurso(context.Context, *Mensaje) (*Mensaje, error)
	LiberarRecurso(context.Context, *Mensaje) (*Mensaje, error)
	WriteLogs(context.Context, *Propuesta) (*Mensaje, error)
	SubirDistribuida(context.Context, *Chunk) (*UploadStatus, error)
	DarPermiso(context.Context, *Solicitud) (*Mensaje, error)
	AceptarSolicitud(context.Context, *Solicitud) (*Mensaje, error)
	mustEmbedUnimplementedEstructuraCentralizadaServer()
}

// UnimplementedEstructuraCentralizadaServer must be embedded to have forward compatible implementations.
type UnimplementedEstructuraCentralizadaServer struct {
}

func (UnimplementedEstructuraCentralizadaServer) Subir(context.Context, *Chunk) (*UploadStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subir not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) EnviarPropuesta(context.Context, *Propuesta) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarPropuesta not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) VerificarEstadoServidor(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificarEstadoServidor not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) EnviarChunk(context.Context, *ChunkSendToServer) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarChunk not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) BajarArchivo(context.Context, *BookToDownload) (*ListChunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BajarArchivo not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) BajarChunk(context.Context, *ChunkDes) (*ChunkBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BajarChunk not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) ObtenerLibrosDisponibles(context.Context, *Mensaje) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerLibrosDisponibles not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) PedirRecurso(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirRecurso not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) LiberarRecurso(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiberarRecurso not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) WriteLogs(context.Context, *Propuesta) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLogs not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) SubirDistribuida(context.Context, *Chunk) (*UploadStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubirDistribuida not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) DarPermiso(context.Context, *Solicitud) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DarPermiso not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) AceptarSolicitud(context.Context, *Solicitud) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AceptarSolicitud not implemented")
}
func (UnimplementedEstructuraCentralizadaServer) mustEmbedUnimplementedEstructuraCentralizadaServer() {
}

// UnsafeEstructuraCentralizadaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstructuraCentralizadaServer will
// result in compilation errors.
type UnsafeEstructuraCentralizadaServer interface {
	mustEmbedUnimplementedEstructuraCentralizadaServer()
}

func RegisterEstructuraCentralizadaServer(s grpc.ServiceRegistrar, srv EstructuraCentralizadaServer) {
	s.RegisterService(&_EstructuraCentralizada_serviceDesc, srv)
}

func _EstructuraCentralizada_Subir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).Subir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/Subir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).Subir(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_EnviarPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).EnviarPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/EnviarPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).EnviarPropuesta(ctx, req.(*Propuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_VerificarEstadoServidor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).VerificarEstadoServidor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/VerificarEstadoServidor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).VerificarEstadoServidor(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_EnviarChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkSendToServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).EnviarChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/EnviarChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).EnviarChunk(ctx, req.(*ChunkSendToServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_BajarArchivo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookToDownload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).BajarArchivo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/BajarArchivo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).BajarArchivo(ctx, req.(*BookToDownload))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_BajarChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkDes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).BajarChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/BajarChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).BajarChunk(ctx, req.(*ChunkDes))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_ObtenerLibrosDisponibles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).ObtenerLibrosDisponibles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/ObtenerLibrosDisponibles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).ObtenerLibrosDisponibles(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_PedirRecurso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).PedirRecurso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/PedirRecurso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).PedirRecurso(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_LiberarRecurso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).LiberarRecurso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/LiberarRecurso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).LiberarRecurso(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_WriteLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).WriteLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/WriteLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).WriteLogs(ctx, req.(*Propuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_SubirDistribuida_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).SubirDistribuida(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/SubirDistribuida",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).SubirDistribuida(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_DarPermiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).DarPermiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/DarPermiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).DarPermiso(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstructuraCentralizada_AceptarSolicitud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstructuraCentralizadaServer).AceptarSolicitud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paquete.estructura_centralizada/AceptarSolicitud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstructuraCentralizadaServer).AceptarSolicitud(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

var _EstructuraCentralizada_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paquete.estructura_centralizada",
	HandlerType: (*EstructuraCentralizadaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subir",
			Handler:    _EstructuraCentralizada_Subir_Handler,
		},
		{
			MethodName: "EnviarPropuesta",
			Handler:    _EstructuraCentralizada_EnviarPropuesta_Handler,
		},
		{
			MethodName: "VerificarEstadoServidor",
			Handler:    _EstructuraCentralizada_VerificarEstadoServidor_Handler,
		},
		{
			MethodName: "EnviarChunk",
			Handler:    _EstructuraCentralizada_EnviarChunk_Handler,
		},
		{
			MethodName: "BajarArchivo",
			Handler:    _EstructuraCentralizada_BajarArchivo_Handler,
		},
		{
			MethodName: "BajarChunk",
			Handler:    _EstructuraCentralizada_BajarChunk_Handler,
		},
		{
			MethodName: "ObtenerLibrosDisponibles",
			Handler:    _EstructuraCentralizada_ObtenerLibrosDisponibles_Handler,
		},
		{
			MethodName: "PedirRecurso",
			Handler:    _EstructuraCentralizada_PedirRecurso_Handler,
		},
		{
			MethodName: "LiberarRecurso",
			Handler:    _EstructuraCentralizada_LiberarRecurso_Handler,
		},
		{
			MethodName: "WriteLogs",
			Handler:    _EstructuraCentralizada_WriteLogs_Handler,
		},
		{
			MethodName: "SubirDistribuida",
			Handler:    _EstructuraCentralizada_SubirDistribuida_Handler,
		},
		{
			MethodName: "DarPermiso",
			Handler:    _EstructuraCentralizada_DarPermiso_Handler,
		},
		{
			MethodName: "AceptarSolicitud",
			Handler:    _EstructuraCentralizada_AceptarSolicitud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paquete.proto",
}
